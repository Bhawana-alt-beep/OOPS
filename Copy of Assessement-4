{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMhwrIpjKOeds+eaRXeaELv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1 What is Object-Oriented Programming (OOP) ?\n","\n","OOPs is a programing paradigm which centered around objects, which is the instance of class.\n","It makes the more structured and readable code.\n"],"metadata":{"id":"vN9IDwG-Va2F"}},{"cell_type":"markdown","source":["#2 What is a class in OOP ?\n"," class is a blueprint of the objects.class includes attributes (data) and behaviour or property(method or function).\n","\n","For example:\n","a class of car is there, it has attributes like color, model ,design and methods like start, stop etc"],"metadata":{"id":"tlMhAGmIcA9P"}},{"cell_type":"markdown","source":["#3 What is an object in OOP ?\n","Objects are the instance of the class. It represents a real world entity with attribute(data) and behaviour(methods).\n","It contains 3 main characters.\n","1 indentifier: every object has its unique indetification.\n","2. state: data or attributes that define the object.\n","3. behavior: the method or functions that describe what the object can do."],"metadata":{"id":"PhQFLkk5c2zv"}},{"cell_type":"markdown","source":["#4 What is the difference between abstraction and encapsulation ?\n","\n","Abstaction is mainly used for hidind the unneccessary data, that we don't want to see. like in a car we need not to see the engine working. hence the engines working is abstracted from the class car.\n","\n","Encapsulation is mainly used to protect the data from being modified .Hence restrict th direct access of the objects.\n","like fuel in a car can only be modidified by refueling."],"metadata":{"id":"kXWVy6STeP1s"}},{"cell_type":"markdown","source":["#5 What are dunder methods in Python ?\n","Dunder methods, also known as magic methods or special methods, are methods in Python that start and end with double underscores (__). These methods allow you to customize the behavior of your objects and integrate them seamlessly with Python's built-in features"],"metadata":{"id":"KVAlLizyVgmx"}},{"cell_type":"markdown","source":["#6  Explain the concept of inheritance in OOP ?\n","\n","Inheritance is mainly to inherit the behaviour or attribute of the parent class.\n","\n","like we have a car having attribute color and design, an object car is created having same color and design as it is inherted from same class.\n"],"metadata":{"id":"KGW78y7OfXJd"}},{"cell_type":"markdown","source":["#7 What is polymorphism in OOP ?\n","\n","Poly means many, morphism means shape.\n","a function, method or attribute or data can be used for different data structures, it is called as polymorphism.\n","\n","Example: length function can be used for integer, string, list etc.\n"],"metadata":{"id":"ONXCNvnKVWAo"}},{"cell_type":"markdown","source":["#8 How is encapsulation achieved in Python ?\n","Encapsulation means hide.\n","It can be achieved by use of classes and objects, which allow us to bundle data and methods that operate on that data within a single unit.\n","Mainly it is achieved by access modifier.\n","By using __underscore and it provide the information that the data or method or class is private. We cannot access it directly.\n"],"metadata":{"id":"b5DQTwArV4zq"}},{"cell_type":"markdown","source":["#9 what is constructor in python ?\n","\n","Constructor in python is mainly \"__init__ \"that is use to intialize objects in programing language. It is called automatically when an instance of a class is created"],"metadata":{"id":"25-RWSoGXtPl"}},{"cell_type":"markdown","source":["#10 What are class and static methods in Python ?\n","\n","Both class and static method is used to define a method that are not tied to a specific instance of a class.\n","\n","Class methods are bounded to the class and not the instance of the class. They can modify the class state that applies across all the instances of the class. It is defined by the \"cls\".\n","\n","Static methods are the methods that doesnot change the instance of the class.They donot take self or cls as decorator.\n"],"metadata":{"id":"v48y0erR02KY"}},{"cell_type":"markdown","source":["#11 What is method overloading in Python ?\n","\n","It is basically using the same named methods with different paramters. Pyhton generally doesnot support method overloading.\n"],"metadata":{"id":"RV3IMuhjnP-y"}},{"cell_type":"markdown","source":["#12  What is method overriding in OOP ?\n","Method overriding occurs when a subclass provide the specific implementation of a method and same implementation is already provide by the method in its superclass.\n"],"metadata":{"id":"txtI3wA3orLK"}},{"cell_type":"markdown","source":["#13 What is a property decorator in Python ?\n","The @decorator in python is a build in decorator that allows you to define methods in a class that can be accessed like attributes. It is mainly used to provide the way to add getter,setter and deleter methods in a clean and readable manner.\n"],"metadata":{"id":"31LsBxE2WQqU"}},{"cell_type":"markdown","source":["#14 Why is polymorphism important in OOP ?\n","\n","polymorphism allows objects of different classes to be treated as objects of a common superclass.\n","\n","Simplified Code Maintenance\n","Enhanced Readability and Manageability\n","\n"],"metadata":{"id":"8n3xEZkj8u__"}},{"cell_type":"markdown","source":["#15  What is an abstract class in Python ?\n","\n","An abstract class in Python is a class that cannot be instantiated directly and is designed to be a blueprint for other classes. Abstract classes allow you to define methods that must be implemented by subclasses, ensuring a consistent interface while still allowing the subclasses to provide specific implementations."],"metadata":{"id":"UkLYlLknQi4S"}},{"cell_type":"markdown","source":["#16  What are the advantages of OOP ?\n","\n","OOP allows you to break down complex problems into smaller, manageable pieces by encapsulating data and functions into objects.\n","\n","Through inheritance, OOP promotes code reuse. You can create new classes based on existing ones, reducing redundancy and saving development time.\n","OOP enables abstraction by allowing you to define complex systems in terms of simpler, more understandable models."],"metadata":{"id":"Ol_Wq0H8Qvgp"}},{"cell_type":"markdown","source":["#17  What is the difference between a class variable and an instance variable?\n","\n","A class variable is shared among all instances of a class. It is defined using the static keyword.  Class variables are accessible to all instances of the class and can be accessed using the class name.\n","\n","An instance variable is unique to each instance of a class. It is defined within methods, typically the __init__ method in Python. Instance variables are accessible only within the instance they belong to."],"metadata":{"id":"J-bvBZJfRAaA"}},{"cell_type":"markdown","source":["#18  What is multiple inheritance in Python ?\n","In multiple inheritance, there is two superclass and there is one subclass of the two superclass.\n","example: class A ,class B are there then, there is a class C (A,B) means drives from class A and  class B."],"metadata":{"id":"wjz5HK3VRbRA"}},{"cell_type":"markdown","source":["#19 Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python\n","\n","The __str__ method is intended to provide a human-readable or informal string representation of an object. This is useful for displaying information to end users.\n","\n","The __repr__ method is intended to provide a more detailed or official string representation of an object, which ideally should be unambiguous and, if possible, a valid Python expression that can be used to recreate the object. This is useful for debugging and logging."],"metadata":{"id":"B_EYNXuHTd1K"}},{"cell_type":"markdown","source":["#20 What is the significance of the ‘super()’ function in Python ?\n","\n","super() allows you to call methods from a parent class within a subclass.\n","By using super(), you can avoid duplicating code.\n","In cases of multiple inheritance, super() ensures that the correct method resolution order (MRO) is followed."],"metadata":{"id":"GYzozSzfT0YW"}},{"cell_type":"markdown","source":["#21  What is the significance of the __del__ method in Python ?\n","The __del__ method in Python is a special method known as the destructor method. It is called when an object is about to be destroyed, allowing you to define specific cleanup actions that should be taken when an object is garbage collected"],"metadata":{"id":"6eRr5yInUIBG"}},{"cell_type":"markdown","source":["#22 What is the difference between @staticmethod and @classmethod in Python ?\n","\n","A static method does not receive any implicit first argument (neither self nor cls). It behaves like a regular function but belongs to the class's namespace.\n","A class method receives the class (cls) as its first argument instead of the instance (self). This allows the method to access and modify class state."],"metadata":{"id":"x8Sg4VO3UUS2"}},{"cell_type":"markdown","source":["#23 How does polymorphism work in Python with inheritance ?\n","Polymorphism in Python, especially when combined with inheritance, allows objects of different classes to be treated as objects of a common superclass. This enables methods in different classes to share the same name but perform distinct tasks.\n","Method Overriding:Subclasses can override methods defined in their superclass.\n","Dynamic Method Resolution: At runtime, Python determines which method to call based on the object's actual type.\n","\n","\n"],"metadata":{"id":"MlIKUp2EUnNG"}},{"cell_type":"markdown","source":["#24  What is method chaining in Python OOP ?\n","\n","Method chaining in Python is a programming technique that allows you to call multiple methods sequentially on the same object in a single line of code. This approach makes the code cleaner, more readable, and often easier to maintain. It's frequently used in object-oriented programming (OOP) to perform a series of operations on an object without needing to store intermediate results"],"metadata":{"id":"gxSuiZZ2VBWW"}},{"cell_type":"markdown","source":["#25  What is the purpose of the __call__ method in Python ?\n","The __call__ method in Python is a special method that allows an instance of a class to be called as if it were a function. This makes objects behave like functions, providing a flexible and powerful way to add functionality to your classes\n"],"metadata":{"id":"93L7oaCLVOFH"}},{"cell_type":"markdown","source":["#1. Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog that overrides the speak() method to print \"Bark!\"."],"metadata":{"id":"hFo20R39ZX1n"}},{"cell_type":"code","source":["class Animal ():\n","  def speak(self):\n","    print (\"generic message\")\n","class dog(Animal):\n","  def speak(self):\n","    print(\"bark!\")\n","Obj= Animal()\n","Obj.speak()\n","Obj1=dog()\n","Obj1.speak()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d67-wp-qZavU","executionInfo":{"status":"ok","timestamp":1747907861533,"user_tz":-330,"elapsed":46,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"b36cfcf3-f658-45d9-d13c-224dfc3a03d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["generic message\n","bark!\n"]}]},{"cell_type":"markdown","source":["#2  Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle from it and implement the area() method in both."],"metadata":{"id":"LJsI1U4Ub2VJ"}},{"cell_type":"code","source":["from abc import ABC, abstractmethod\n","import math\n","\n","class shape(ABC):\n","  @abstractmethod\n","  def area(self):\n","    pass\n","class circle(shape):\n","  def __init__(self,radius):\n","    self.radius=radius\n","  def area(self):\n","      return math.pi*self.radius**2\n","class rectangle(shape):\n","  def __init__(self,width,length):\n","    self.width= width\n","    self.length=length\n","  def area(self):\n","      return self.width*self.length\n","\n","circle = circle(5)\n","rectangle = rectangle(4, 6)\n","\n","print(f\"Area of the circle: {circle.area()}\")\n","print(f\"Area of the rectangle: {rectangle.area()}\")\n","\n"],"metadata":{"id":"EpYJSRbzb8U8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747973405341,"user_tz":-330,"elapsed":9,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"e24b7d03-b3e5-491d-e5b3-435e487efc6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Area of the circle: 78.53981633974483\n","Area of the rectangle: 24\n"]}]},{"cell_type":"markdown","source":["# 3. Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car and further derive a class ElectricCar that adds a battery attribute"],"metadata":{"id":"RuZvJH-906k3"}},{"cell_type":"code","source":["class vehicle():\n","  def veh(self,type):\n","    self.type=type\n","    return self.type\n","class car(vehicle):\n","  def ca(self,model):\n","    self.model=model\n","    return self.model\n","class electriccar(car):\n","  def ec(self,battery):\n","    self.battery=battery\n","    return self.battery\n","veh1=vehicle()\n","car1=car()\n","ec1=electriccar()\n","print(veh1.veh(\"suv\"))\n","print(car1.veh(\"sedan\"))\n","print(ec1.veh(\"sedan\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2XqUb6-1B83","executionInfo":{"status":"ok","timestamp":1748341440843,"user_tz":-330,"elapsed":10,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"10b66243-e71c-4b94-cd95-1aa53dbc3d51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["suv\n","sedan\n","sedan\n"]}]},{"cell_type":"markdown","source":["#4 Demonstrate polymorphism by creating a base class Bird with a method fly(). Create two derived classes Sparrow and Penguin that override the fly() method.\n","\n"],"metadata":{"id":"1ZXyVO_rRXJT"}},{"cell_type":"code","source":["class bird():\n","  def fly(self):\n","    return \"This is bird class\"\n","class sparrow(bird):\n","  def fly(self):\n","    return \"this is sparrow fly\"\n","class Penguin(bird):\n","  def fly(Self):\n","    return \"this is penguin fly\"\n","bird1=bird()\n","sparrrow1=sparrow()\n","penguin1=Penguin()\n","bird1.fly()\n","sparrrow1.fly()"],"metadata":{"id":"KD_w4cpi1MTX","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1748412751048,"user_tz":-330,"elapsed":12,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"ace7db68-0c8a-4ed2-d625-dd04139b2b03"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'this is sparrow fly'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["#5 Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes balance and methods to deposit, withdraw, and check balance"],"metadata":{"id":"sCwUwwFShXfD"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self,int_Balance=0):\n","        self.__balance=int_Balance\n","        print(\"1st\")\n","    def deposit(self,deposit):\n","        self.__balance = self.__balance + deposit\n","        print(\"Deposited ammount\",self.deposit)\n","    def withdraw(self,withdraw):\n","        self.__balance = self.__balance - withdraw\n","        print(\"withdrawal amount\", self.withdraw)\n","    def checkbalance(self):\n","        self.balance=self.__balance\n","        print (self.balance)\n","\n","obj=BankAccount(1000)\n","obj.deposit(100)\n","obj.checkbalance()\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vrPUlSythdVB","executionInfo":{"status":"ok","timestamp":1748415311893,"user_tz":-330,"elapsed":3,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"037f381f-aa44-4786-fdea-0c2044fb67c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1st\n","2nd\n","Deposited ammount <bound method BankAccount.deposit of <__main__.BankAccount object at 0x790eb2e42410>>\n","1100\n"]}]},{"cell_type":"markdown","source":["#6 Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar and Piano that implement their own version of play()."],"metadata":{"id":"J7UnCRD9rOBS"}},{"cell_type":"code","source":["class instruments():\n","  def play(self):\n","    print(\"This is a instruments class\")\n","class guitar(instruments):\n","  def play(self):\n","    print(\"This a guitar class\")\n","class piano(instruments):\n","  def play(self):\n","    print(\"This is a piano class\")\n","obj=instruments()\n","obj1=guitar()\n","obj2=piano()\n","obj.play()\n","obj1.play()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7XQduLY5x_8v","executionInfo":{"status":"ok","timestamp":1748420132115,"user_tz":-330,"elapsed":13,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"8ff15b50-f4ed-4ab7-90fd-8f2b14c5e48f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a instruments class\n","This a guitar class\n"]}]},{"cell_type":"markdown","source":["#7 Create a class MathOperations with a class method add_numbers() to add two numbers and a static method subtract_numbers() to subtract two numbers."],"metadata":{"id":"879o40VU9-cv"}},{"cell_type":"code","source":["class MathOperations:\n","  @classmethod\n","  def add_numbers(cls,x,y):\n","    return x+y\n","  @staticmethod\n","  def subtract_numbers(x,y):\n","    return x-y\n","print(MathOperations.add_numbers(2,3))\n","print(MathOperations.subtract_numbers(9,5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gCSCelFW-CWL","executionInfo":{"status":"ok","timestamp":1748420920235,"user_tz":-330,"elapsed":10,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"75c43b8f-8a57-42cf-8b77-74efa85f7a55"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","4\n"]}]},{"cell_type":"markdown","source":["#8  Implement a class Person with a class method to count the total number of persons created."],"metadata":{"id":"xv0NAW0mAiTb"}},{"cell_type":"code","source":["class Person:\n","  count=0\n","  def __init__(self,name):\n","    self.name=name\n","    Person.count=Person.count+1\n","  @classmethod\n","  def total_person(cls):\n","    return cls.count\n","person1=Person(\"aice\")\n","person2=Person(\"bob\")\n","Person.total_person()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JyzZUbsyAnUo","executionInfo":{"status":"ok","timestamp":1748421316771,"user_tz":-330,"elapsed":8,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"c42137e4-b8db-43f2-8806-47cad012a5de"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["#9 Write a class Fraction with attributes numerator and denominator. Override the str method to display the fraction as \"numerator/denominator\"."],"metadata":{"id":"szqfbuTGCEFT"}},{"cell_type":"code","source":["class Fraction:\n","  def __init__(self,numerator,denominator):\n","    self.numerator= numerator\n","    self.denominator=denominator\n","  def __str__(self):\n","    return self.numerator/self.denominator\n","obj=Fraction(2,3)\n","print(obj.__str__())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r_8T8OdZCekG","executionInfo":{"status":"ok","timestamp":1748421771793,"user_tz":-330,"elapsed":7,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"9bbe0d3c-304b-4e47-abc3-a59853a34ba8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6666666666666666\n"]}]},{"cell_type":"markdown","source":["#10 Demonstrate operator overloading by creating a class Vector and overriding the add method to add two vectors."],"metadata":{"id":"R1KbVOHHDyRe"}},{"cell_type":"code","source":["from re import X\n","class vector:\n","  def __init__(self,x,y):\n","    self.x=x\n","    self.y=y\n","  def __add__(self,other):\n","    return self.x+other.x , self.y+other.y\n","  def add(self):\n","    return self.x,self.y\n","\n","vector1=vector(2,3)\n","vector2=vector(4,5)\n","result= vector1 + vector2\n","print(result)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mud_LPTxD4Dd","executionInfo":{"status":"ok","timestamp":1748422679486,"user_tz":-330,"elapsed":10,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"ce763a84-e28c-4568-a992-025873f64a34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(6, 8)\n"]}]},{"cell_type":"markdown","source":["#11  Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is {name} and I am {age} years old."],"metadata":{"id":"Z0ZjZwD0HPed"}},{"cell_type":"code","source":["class person:\n","  def __init__(self,name,age):\n","    self.name=name\n","    self.age=age\n","  def greet(self):\n","    print(\"Hello , my name is\",self.name,\"and I am \",self.age,\"years old\")\n","person1=person(\"a\",23)\n","person1.greet()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0MRS9hb_XSJX","executionInfo":{"status":"ok","timestamp":1748492644466,"user_tz":-330,"elapsed":9,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"49f06874-7d26-447d-fb24-7c8c0f0b760f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello , my name is a and I am  23 years old\n"]}]},{"cell_type":"markdown","source":["#12 Implement a class Student with attributes name and grades. Create a method average_grade() to compute the average of the grades"],"metadata":{"id":"2ROzruymSJY0"}},{"cell_type":"code","source":["class Student:\n","  def __init__(self,name,grade):\n","    self.name=name\n","    self.grade=grade\n","  def average_grade(self):\n","    print(sum(self.grade)/len(self.grade))\n","stud=Student(\"a\",[2,4,5,6,7])\n","stud.average_grade()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y0cTE68YSO7T","executionInfo":{"status":"ok","timestamp":1748492859966,"user_tz":-330,"elapsed":6,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"703db3d5-d22b-492f-d14d-07eeb283d6ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4.8\n"]}]},{"cell_type":"markdown","source":["#13 Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the area."],"metadata":{"id":"Zo9VGPjUS_kI"}},{"cell_type":"code","source":["class Rectangle :\n","  def set_dimension(self,length,width):\n","    self.length=length\n","    self.width=width\n","  def area(self):\n","    return self.length*self.width\n","rect=Rectangle()\n","rect.set_dimension(2,3)\n","rect.area()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T8mC8r5xYh28","executionInfo":{"status":"ok","timestamp":1748494548918,"user_tz":-330,"elapsed":9,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"d949f013-5580-49c2-e1e3-fe3dd77b2cba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["#14  Create a class Employee with a method calculate_salary() that computes the salary based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary\n"],"metadata":{"id":"Ios8mSURZZl-"}},{"cell_type":"code","source":["class Employee:\n","  def __init__(self,name,hours_worked,hourly_rate):\n","    self.name=name\n","    self.hours_worked=hours_worked\n","    self.hourly_rate=hourly_rate\n","  def calculate_salary(self):\n","    self.salary=self.hours_worked* self.hourly_rate\n","    return self.salary\n","class Manager(Employee):\n","  def __init__(self,name,hours_worked,hourly_rate,bonus):\n","    Employee.__init__(self,name,hours_worked,hourly_rate)\n","    self.bonus=bonus\n","  def calculate_salary(self):\n","    salary=Employee.calculate_salary(self)\n","    return salary+self.bonus\n","\n","obj1= Employee(\"a\",20,20)\n","obj1.calculate_salary()\n","obj2=Manager(\"B\",30,300,30)\n","obj2.calculate_salary()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hjUPYDd2dvDr","executionInfo":{"status":"ok","timestamp":1748506548928,"user_tz":-330,"elapsed":7,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"0dcd84b4-b155-48e0-a1db-2a558bf8dd0f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9030"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["#15  Create a class Product with attributes name, price, and quantity. Implement a method total_price() that calculates the total price of the product."],"metadata":{"id":"SmIxb0HIHLoX"}},{"cell_type":"code","source":["class product:\n","  def __init__(self,name,price,quantity):\n","    self.name=name\n","    self.price=price\n","    self.quantity=quantity\n","  def total_price(self):\n","    return self.price*self.quantity\n","obj=product(\"a\",50,10)\n","obj.total_price()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27oHmf_MMGUu","executionInfo":{"status":"ok","timestamp":1748508154972,"user_tz":-330,"elapsed":8,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"66f3603c-9bf3-479b-ec78-86998ca37d1d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["500"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["#16  Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that implement the sound() method."],"metadata":{"id":"X9cJ9BPFNT0i"}},{"cell_type":"code","source":["from abc import ABC, abstractmethod\n","class Animal(ABC):\n","  @abstractmethod\n","  def sound(self):\n","    pass\n","class cow(Animal):\n","  def sound(self):\n","    print(\"mooo\")\n","class sheep(Animal):\n","  def sound(self):\n","    print(\"baa\")\n","obj=cow()\n","obj.sound()\n","obj1=sheep()\n","obj1.sound()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iYcfdRhkODe8","executionInfo":{"status":"ok","timestamp":1748508620090,"user_tz":-330,"elapsed":25,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"c2a408d5-5e3c-45a7-dcab-4cbc882271a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mooo\n","baa\n"]}]},{"cell_type":"markdown","source":["#17 Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that returns a formatted string with the book's details"],"metadata":{"id":"Clo2g-NAPEaL"}},{"cell_type":"code","source":["class Book:\n","  def __init__(self,title,author,year_published):\n","    self.title=title\n","    self.author=author\n","    self.year_published=year_published\n","  def get_book_info(self):\n","    return \"Book title is:\",self.title,\"author is:\",self.author,\"published in:\",self.year_published\n","Book1=Book(\"a\",\"abc\",2025)\n","Book1.get_book_info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yy--MJmzPTKy","executionInfo":{"status":"ok","timestamp":1748508947442,"user_tz":-330,"elapsed":15,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"8c969077-4eb7-4d53-fb00-7ba4568a09db"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('Book title is:', 'a', 'author is:', 'abc', 'published in:', 2025)"]},"metadata":{},"execution_count":64}]},{"cell_type":"markdown","source":["#18 Create a class House with attributes address and price. Create a derived class Mansion that adds an attribute number_of_rooms."],"metadata":{"id":"n2_qTy_tQUB3"}},{"cell_type":"code","source":["class House:\n","  def __init__(self,address,price):\n","    self.address=address\n","    self.price=price\n","  def display_info(self):\n","    print(f\"The address is {self.address},the price is : {self.price}\")\n","class Mansion(House):\n","  def __init__(self,address,price,number_of_rooms):\n","    super().__init__(address,price)\n","    self.number_of_rooms=number_of_rooms\n","  def display_info(self):\n","    super().display_info()\n","    print(f\"The number of rooms are:{self.number_of_rooms}\")\n","house1=House(\"abc\",200)\n","house2=Mansion(\"ABC\",200,4)\n","house2.display_info()\n"],"metadata":{"id":"7GmONw9gQYBA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748577404052,"user_tz":-330,"elapsed":7,"user":{"displayName":"Bhawana yadav","userId":"05988767032176509191"}},"outputId":"ea328129-f968-4d23-8764-69a8c889ace1"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["The address is ABC,the price is : 200\n","The number of rooms are:4\n"]}]}]}